var documenterSearchIndex = {"docs":
[{"location":"#PolynomialMatrixEquations.jl","page":"Home","title":"PolynomialMatrixEquations.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains algorithms to solve Quadrilateral Matrix Equations in the form of","category":"page"},{"location":"","page":"Home","title":"Home","text":"A_0 + A_1 X + A_2 X^2 = bm0","category":"page"},{"location":"#Cyclic-Reduction","page":"Home","title":"Cyclic Reduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This algorithm adapted from Bini et al.[1] solves the second order matrix equation iteratively for X. It is implemented both for A_0, A_1 and A_2 dense or sparse (i.e. SparseMatrixCSC). In the sparse version, a special packing is performed that maximally exploits the column and row sparsity of the A matrices.","category":"page"},{"location":"#Generalized-Schur-Decomposition-Solver","page":"Home","title":"Generalized Schur Decomposition Solver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The polynomial matrix equation","category":"page"},{"location":"","page":"Home","title":"Home","text":"A_0 + A_1 X + A_2 X^2 = bm0","category":"page"},{"location":"","page":"Home","title":"Home","text":"can be rewritten in the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginbmatrix\n0  A_2 \nI  0\nendbmatrix \nbeginbmatrix\nI  X\nendbmatrix X\n=\n-beginbmatrix\nA_0  A_1 \n0  I\nendbmatrix \nbeginbmatrix\nI  X\nendbmatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"In practive, it is possible to eliminate empty columns in A_0, A_1 and A_2 (See [2-4] for further info). More generally, this solver finds a solution to the following equation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"D beginbmatrix\nI  X_2\nendbmatrix X_1\n=\nE beginbmatrix\nI  X_2\nendbmatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"where matrices X_1 and X_2 contain columns from the solution matrix X.","category":"page"},{"location":"#Interface","page":"Home","title":"Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PolynomialMatrixEquations.Workspace\nPolynomialMatrixEquations.solve\nPolynomialMatrixEquations.solve!","category":"page"},{"location":"#FastLapackInterface.Workspace","page":"Home","title":"FastLapackInterface.Workspace","text":"Workspace(a0, a1, a2)\nWorkspace(d, e, n)\n\nWill return the right workspace for solve! on a given set of a0, a1 and a2, or matrices d, e and number of stable solutions n. If DenseMatrices are passed in, or d and e, it will return a GSSolverWs, else a CRSolverWs. \n\n\n\n\n\n","category":"type"},{"location":"#PolynomialMatrixEquations.solve","page":"Home","title":"PolynomialMatrixEquations.solve","text":"solve\n\nWill first construct the right Workspace and then call solve!.\n\n\n\n\n\n","category":"function"},{"location":"#PolynomialMatrixEquations.solve!","page":"Home","title":"PolynomialMatrixEquations.solve!","text":"solve!(ws, a0, a1, a2; kwargs...)\n\nIn place solve of the Quadrilateral Matrix Equation a0 + a1 * x + a2 * x * x = 0 for x and returns x.\n\nUses:\n\nGeneralized Schur when ws is a GSSolverWs and a0, a1 and a2 are DenseMatrices\nCyclic Reduction when ws is a CRSolverWs and at least a0 and a2 are SparseMatrixCSC\n\nFurther kwargs:\n\ntolerance <1e-8>: convergence tolerance when using cyclic reduction,                     or tolerance for stable eigenvalues of the schur decomposition (eigval > 1 + tolerance is stable)\nmax_iterations <100>: maximum iterations allowed in cyclic reduction\n\nExamples:\n\njulia> using PolynomialMatrixEquations\n\njulia> const PME = PolynomialMatrixEquations\nPolynomialMatrixEquations\n\njulia> a0 = [1.21 0.0 0.0\n             0.27 0.0 0.0\n             1.93 0.0 0.0];\n\njulia> a1 = [0.81  -0.68 0.22\n             -1.12 0.14 -0.88\n             -1.1 0.12 -1.14];\n\njulia> a2 = [0.0 -0.42 -0.42\n             0.0 0.29 -1.36\n             0.0 0.23 -1.09];\n\njulia> ws2 = PME.Workspace(a0, a1, a2)\nPolynomialMatrixEquations.GSSolverWs{Float64}\n  tmp1: 1×1 Matrix{Float64}\n  tmp2: 1×1 Matrix{Float64}\n  g1: 1×1 Matrix{Float64}\n  g2: 2×1 Matrix{Float64}\n  x: 3×3 Matrix{Float64}\n  d: 3×3 Matrix{Float64}\n  e: 3×3 Matrix{Float64}\n  luws1: FastLapackInterface.LUWs\n  luws2: FastLapackInterface.LUWs\n  schurws: FastLapackInterface.GeneralizedSchurWs{Float64}\n\njulia> PME.solve!(ws2, a0, a1, a2)\n3×3 Matrix{Float64}:\n -0.511005  0.0  0.0\n  5.72536   0.0  0.0\n  4.29884   0.0  0.0\n\njulia> using SparseArrays\n\njulia> a0 = sparse([1.21 0.0 0.0\n                    0.27 0.0 0.0\n                    1.93 0.0 0.0]);\n\njulia> a1 = sparse([0.81  -0.68 0.22\n                    -1.12 0.14 -0.88\n                    -1.1 0.12 -1.14]);\n\njulia> a2 = sparse([0.0 -0.42 -0.42\n                    0.0 0.29 -1.36\n                    0.0 0.23 -1.09]);\n\njulia> ws2 = PME.Workspace(a0, a1, a2)\nPolynomialMatrixEquations.CRSolverWs{Float64, FastLapackInterface.LUWs, SparseMatrixCSC{Float64, Int64}}\n  linsolve_ws: FastLapackInterface.LUWs\n  ahat1: 3×3 Matrix{Float64}\n  a1copy: 3×3 Matrix{Float64}\n  x: 3×3 SparseMatrixCSC{Float64, Int64} with 3 stored entries\n  m: 6×6 Matrix{Float64}\n  m1: 3×6 Matrix{Float64}\n  m2: 6×3 Matrix{Float64}\n\njulia> PME.solve!(ws2, a0, a1, a2)\n3×3 SparseMatrixCSC{Float64, Int64} with 3 stored entries:\n -0.511005   ⋅    ⋅\n  5.72536    ⋅    ⋅\n  4.29884    ⋅    ⋅\n\n\n\n\n\n","category":"function"},{"location":"#Workspaces","page":"Home","title":"Workspaces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PolynomialMatrixEquations.GSSolverWs\nPolynomialMatrixEquations.CRSolverWs","category":"page"},{"location":"#PolynomialMatrixEquations.GSSolverWs","page":"Home","title":"PolynomialMatrixEquations.GSSolverWs","text":"GSSolverWs\n\nWorkspace for solving with the Generalized Schur solver. GSSolverWs(A) with A an example Matrix. \n\n\n\n\n\n","category":"type"},{"location":"#PolynomialMatrixEquations.CRSolverWs","page":"Home","title":"PolynomialMatrixEquations.CRSolverWs","text":"CRSolverWs\n\nWorkspace used for solving with the cyclic reduction algorithm of Bini et al..\n\n\n\n\n\n","category":"type"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"D.A. Bini, B. Iannazzo, B. Meini, Numerical Solution of Algebraic Riccati Equations, SIAM Book Series Fundamentals of Algorithms, 2012.\nP. Klein Using the generalized Schur form to solve a linear rational expectations model, Journal of Economic Dynamics and Control, 2000.\nC. Sims Solving rational expectations models, Computational Economics, 2002.\nN. J. Higham and H. Kim Numerical analysis of a quadratic matrix equation, Journal of Numerical Analysis, 2000.","category":"page"}]
}
